import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import packets.Packet;
import packets.Packet1Connect;
import packets.Packet2ClientConnected;
import packets.Packet3ClientDisconnect;
import packets.Packet4Chat;

import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Server;

class Main {
	
	private static HashMap<String, Connection> client = new HashMap<String, Connection>();//declaring a parameterised  hashmap of type string and Connection called client 
	
	public static void main(String[] args) throws IOException{//start of program in main, throws IOException incase something goes wrong
		   final Server s = new Server();//creating a new server object from kryonet
		   s.start();//starting the server with start method
		   s.bind(23900, 23901);//setting the port
		    
		    
	        
	
	  s.addListener(new Listener() {//
	       public void received (Connection connection, Object object) {//creating a method that takes in two parameters 
	          if(object instanceof Packet){//using a conditional if statement to check if object is instance of packet
	        	  if(object instanceof Packet1Connect){
	        		  Packet1Connect p1 = (Packet1Connect) object;//creating a object called p1
	        		  client.put(p1.username, connection);
	        		  Packet2ClientConnected p2 = new Packet2ClientConnected();
	        		  p2.clientName = p1.username;
	        		  s.sendToAllExceptTCP(connection.getID(), p2);
	        	  } else if (object instanceof Packet3ClientDisconnect){
	        		  Packet3ClientDisconnect p3 = (Packet3ClientDisconnect) object;
	        		  client.remove(p3.clientName);
	        		  s.sendToAllExceptTCP(client.get(p3.clientName).getID(), p3);
	        	     } else if(object instanceof Packet4Chat){
	        	    	 Packet4Chat p4 =(Packet4Chat) object;
	        	    	 System.out.println("chat:" + p4.message);
	        	    	 s.sendToAllTCP(p4);
	        	  }
	          }
	       }
	       
	       public void disconnected (Connection connection){//creating a method to disconnect
	    	   Packet3ClientDisconnect p3 = new Packet3ClientDisconnect();//creating a new object called p3
	    	   Iterator it = client.entrySet().iterator();//
	    	   String username = "";//empy string variable
	    	   while(it.hasNext()){//creating a while loop that returns true if the iteration has more elements
	    		   Map.Entry pairs = (Map.Entry)it.next();//
	    		   if(pairs.getValue().equals(connection)){//if the entry pairs
	    			   username = (String)pairs.getKey();//
	    			   break;//
	    		   }
	    	   }
	    	   if(!username.equalsIgnoreCase("")){//
	    		   p3.clientName = username;//
	    		   s.sendToAllExceptTCP(connection.getID(), p3);//
	    	   }
	    	   
	    	   
	       }
	  });
	  
	  s.getKryo().register(Packet.class);//the server declared at the main gets the kryo instance that will be used to serialize and deserialize objects each of the packets
	  s.getKryo().register(Packet1Connect.class);
	  s.getKryo().register(Packet2ClientConnected.class);
	  s.getKryo().register(Packet3ClientDisconnect.class);
	  s.getKryo().register(Packet4Chat.class);
	       }
}
